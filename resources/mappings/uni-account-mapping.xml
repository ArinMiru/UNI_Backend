<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="uni-account-mapping">

  
  <select id="selectCheckId" resultType="hashMap" parameterType="hashMap">
    SELECT 	IF(PASS = #{LOGIN_PASS},'00','01') AS RSLT_CD 
    FROM 	MEMB_BAS
	WHERE 	MEMB_ID = #{LOGIN_ID}
  </select>
  
  <select id="selectMembInfo" resultType="HashMap" parameterType="HashMap">
    SELECT 
		A.MEMB_ID AS LOGIN_ID
		,A.MEMB_NM
		,A.MEMB_SC_CD
		,A.MEMB_DEP_CD
		,A.MEMB_NUM
        ,B.SCH_NM AS MEMB_SC_NM
		,B.DPRT_NM AS MEMB_DEP_NM
		,A.TIT_CD
		,D.CODE_VAL AS TIT_NM
		,A.NICK_NM
		,A.MEMB_GRA
		,A.MEMB_EM
		,A.PROF_IMG_PATH
		,IF(E.CERT_DIV_CD = '01','Y','N') AS COLL_CERT_IND
	FROM MEMB_BAS A 
    LEFT JOIN SCHL_DPRT_SRCH B ON B.SCH_CD = A.MEMB_SC_CD
						      AND B.DPRT_CD = A.MEMB_DEP_CD
	LEFT JOIN CD_BAS D ON D.CODE_TYPE = 'TIT_CD' AND D.CODE = A.TIT_CD
	LEFT JOIN CERT_MEMB_HIST E ON E.MEMB_ID = A.MEMB_ID AND E.CERT_DIV_CD = '01'
	WHERE A.MEMB_ID = #{LOGIN_ID}
  </select>
  
<select id="selectSchlSrch" resultType="HashMap" parameterType="HashMap">
  <!-- 대학교명 검색 (2023.09.03 김도원) -->
    SELECT DISTINCT
        SCH_CD
        ,SCH_NM
    FROM SCHL_DPRT_SRCH
    WHERE SCH_NM LIKE CONCAT("%",#{SCH_NM},"%")
</select>


<select id="selectSchlAndDprtSrch" resultType="HashMap" parameterType="HashMap">
	<!-- 학과 검색 (2023.09.03 김도원) -->
    SELECT DISTINCT
        SCH_CD
        ,SCH_NM
        ,DPRT_CD
        ,DPRT_NM
    FROM SCHL_DPRT_SRCH
    WHERE SCH_CD = #{SCH_CD}
</select>
  
  <select id="selectMembInfoAdmin" resultType="HashMap" parameterType="HashMap">
  <!-- 2023.05.18 관리자 사용자정보/ 김도원 생성 -->
    SELECT 
		A.MEMB_ID
		,A.MEMB_NM
		,A.MEMB_SC_CD
		,A.MEMB_DEP_CD
		,A.MEMB_NUM
        ,B.SCH_NM AS MEMB_SC_NM
		,B.DPRT_NM AS MEMB_DEP_NM
		,A.TIT_CD
		,D.CODE_VAL AS TIT_NM
		,A.NICK_NM
		,A.MEMB_GRA
		,A.MEMB_EM
		,A.PROF_IMG_PATH
		,IF(E.CERT_DIV_CD = '01','Y','N') AS COLL_CERT_IND
	FROM MEMB_BAS A 
    LEFT JOIN SCHL_DPRT_SRCH B ON B.SCH_CD = A.MEMB_SC_CD
						      AND B.DPRT_CD = A.MEMB_DEP_CD
	LEFT JOIN CD_BAS D ON D.CODE_TYPE = 'TIT_CD' AND D.CODE = A.TIT_CD
	LEFT JOIN CERT_MEMB_HIST E ON E.MEMB_ID = A.MEMB_ID AND E.CERT_DIV_CD = '01'
	WHERE A.MEMB_ID = #{MEMB_SC_CD}
  </select>
  
  <select id="selectOpenBubInfo" resultType="HashMap" parameterType="HashMap">
    SELECT 
		*
	FROM (
		SELECT
			ROW_NUMBER() OVER() AS R_NUM
			,Z.MEMB_ID
			,Z.CRE_SEQ	
			,Z.TIT
			,Z.CONT
			,Z.LIKE_CNT
			,DATE_FORMAT(Z.CRE_DAT,'%Y-%m-%d %H:%i') AS CRE_DAT
			,B.SCH_NM AS MEMB_SC_NM
			,B.DPRT_NM AS MEMB_DEP_NM
			,D.CODE_VAL AS TIT_NM
			,A.NICK_NM
		FROM OPEN_BUB_BAS Z,MEMB_BAS A
		   	LEFT JOIN SCHL_DPRT_SRCH B ON B.SCH_CD = A.MEMB_SC_CD
						              AND B.DPRT_CD = A.MEMB_DEP_CD
			LEFT JOIN CD_BAS D ON D.CODE_TYPE = 'TIT_CD' AND D.CODE = A.TIT_CD
		WHERE Z.MEMB_SC_CD = #{MEMB_SC_CD}
		AND Z.MEMB_ID = A.MEMB_ID
		<if test='!"04".equals(TIT_CD)'> 
		AND Z.MEMB_DEP_CD = #{MEMB_DEP_CD}
		</if>
		ORDER BY Z.CRE_DAT DESC
 	) A
 	<![CDATA[
	WHERE A.R_NUM >= (IF(1 = #{REQ_PAGE},0,#{REQ_PAGE}-1) * IF(1 = #{REQ_PAGE},0,#{LIST_UNIT_CNT})) + 1
	AND A.R_NUM <= #{REQ_PAGE} * #{LIST_UNIT_CNT}
	]]>
  </select>
  
  <select id="selectOpenImgInfo" resultType="HashMap" parameterType="HashMap">
    SELECT 
		B.FILE_PATH
		,B.IMG_SEQ
	FROM 	OPEN_BUB_BAS A , OPEN_BUB_IMG_HIST B
	WHERE 	B.CRE_SEQ = A.CRE_SEQ
	AND 	A.MEMB_SC_CD = #{MEMB_SC_CD}
	<if test='!"04".equals(TIT_CD)'> 
	AND 	A.MEMB_DEP_CD = #{MEMB_DEP_CD}
	</if>
	AND 	A.CRE_SEQ = #{CRE_SEQ}
  </select>
  

  <insert id="insertMembInfo" parameterType="HashMap">
  <!-- 23.05.13 select -> insert 로 수정 완료 -->
  <!-- 23.05.13 value 값 수정 완료 -->
  	INSERT INTO MEMB_BAS (MEMB_ID,PASS,MEMB_NM) VALUES (#{MEMB_ID},#{PASS},#{MEMB_NM})
  </insert>
  
  <update id="updateMembuniCertUpd" parameterType="Hashmap"> 
  <!-- 23.05.10 대학인증 회원수정 (김도원) -->
  	UPDATE MEMB_BAS set
		MEMB_SC_CD 		= #{MEMB_SC_CD}
		,MEMB_DEP_CD 	= #{MEMB_DEP_CD}
		,MEMB_NUM 		= #{MEMB_NUM}
		,MEMB_EM 		= #{MEMB_EM}
		,UPD_DAT		= SYSDATE()
	WHERE MEMB_ID = #{MEMB_ID}
  </update>
  
  <update id="updateMembPassUpd" parameterType="Hashmap">
  <!-- 23.05.10 비밀번호 변경 (김도원) -->
  	UPDATE MEMB_BAS set
		PASS 		= #{PASS}
	WHERE MEMB_ID = #{MEMB_ID}
  </update>
  
  <update id="updateMembNicUpd" parameterType="Hashmap">
  	<!-- 23.05.10 닉네임 변경 (김도원) -->
  	UPDATE MEMB_BAS set
 		NICK_NM 	= #{NICK_NM}
	WHERE MEMB_ID = #{MEMB_ID}
  </update>
  
  <update id="updateMembAlmInfoUpd" parameterType="Hashmap">
  	<!-- 23.05.10 알림정보수정 (김도원) -->
  	UPDATE USE_NOTICE_BAS set
		APP_NOTICE_YN 	= #{APP_NOTICE_YN}
		,DEP_NOTICE_YN 	= #{DEP_NOTICE_YN}
		,UPD_DAT		= NOW()
	WHERE MEMB_ID = #{MEMB_ID}	
  </update>
  
  <update id="updateMembInfoUpd" parameterType="Hashmap">
  	<!-- 23.05.10 프로파일 이미지변경 (김도원) -->
  	<!-- 주의사항 이미지 파일명을 회원 id 로 변경하여 저장한다.(확장자는 유지) -->
	UPDATE MEMB_BAS set
 		PROF_IMG_PATH = #{PROF_IMG_PATH}
 		,UPD_DAT		= SYSDATE()
	WHERE MEMB_ID = #{MEMB_ID}
  </update>  
  
  <select id="selectMembIdchk" resultType="String" parameterType="HashMap">
  	<!-- 23.05.10 회원 ID 중복 체크 (김도원) -->
  	SELECT 'Y' FROM dual
   	WHERE EXISTS (
   		SELECT MEMB_ID FROM MEMB_BAS 
   		WHERE MEMB_ID = #{MEMB_ID})
  </select>
  
  <select id="selectMembNicchk" resultType="String" parameterType="HashMap">
  	<!-- 23.05.10 닉네임 중복 체크 (김도원) -->
	SELECT 'Y' FROM dual
   	WHERE EXISTS (
   		SELECT MEMB_ID FROM MEMB_BAS 
   		WHERE NICK_NM = #{NICK_NM})
  </select>  
  
  <update id="updateOpenLikeUpd" parameterType="Hashmap">
  	UPDATE OPEN_BUB_BAS 
  	SET LIKE_CNT = IFNULL(LIKE_CNT, 0) + 1
  	WHERE MEMB_SC_CD = #{MEMB_SC_CD}
    	AND MEMB_DEP_CD = #{MEMB_DEP_CD}
    	AND CRE_SEQ = #{CRE_SEQ};
  </update>

  <update id="updateOpenLikeMinusUpd" parameterType="Hashmap">
  	UPDATE OPEN_BUB_BAS 
  	SET LIKE_CNT = IF(IFNULL(LIKE_CNT, 0) = 0,LIKE_CNT, IFNULL(LIKE_CNT, 0) - 1)
  	WHERE MEMB_SC_CD = #{MEMB_SC_CD}
    	AND MEMB_DEP_CD = #{MEMB_DEP_CD}
    	AND CRE_SEQ = #{CRE_SEQ};
   </update>
   
   <insert id="insertLikeBas" parameterType="Hashmap">
   		INSERT OPEN_LIKE_BAS(
   		MEMB_SC_CD
   		,MEMB_DEP_CD
   		,MEMB_ID
   		,CRE_SEQ
   		,LIKE_YN
   		) 
        VALUES (
   		#{MEMB_SC_CD}
   		,#{MEMB_DEP_CD}
   		,#{MEMB_ID}
   		,#{CRE_SEQ}
   		,'Y'
   		)
   		ON DUPLICATE KEY UPDATE
   		   LIKE_YN = 'Y'
   </insert>
   
   <insert id="insertUnLikeBas" parameterType="Hashmap">
   		INSERT OPEN_LIKE_BAS(
   		MEMB_SC_CD
   		,MEMB_DEP_CD
   		,MEMB_ID
   		,CRE_SEQ
   		,LIKE_YN
   		) 
        VALUES (
   		#{MEMB_SC_CD}
   		,#{MEMB_DEP_CD}
   		,#{MEMB_ID}
   		,#{CRE_SEQ}
   		,'N'
   		)
   		ON DUPLICATE KEY UPDATE
   		   LIKE_YN = 'N'
   </insert>
   
  <select id="selectOpenLikeCnt" resultType="HashMap" parameterType="Hashmap">
  	SELECT IFNULL(LIKE_CNT, 0) LIKE_CNT 
  	FROM OPEN_BUB_BAS 
  	WHERE MEMB_SC_CD = #{MEMB_SC_CD}
    	AND MEMB_DEP_CD = #{MEMB_DEP_CD}
    	AND CRE_SEQ = #{CRE_SEQ};
  </select>   

  <update id="updateFreeLikeUpd" parameterType="Hashmap">
	UPDATE FREE_BUB_BAS set
 		 LIKE_CNT		= IFNULL(LIKE_CNT,0) + 1 			
	WHERE MEMB_SC_CD 	= #{MEMB_SC_CD}
	AND   MEMB_DEP_CD 	= #{MEMB_DEP_CD}
	AND   CRE_SEQ 		= #{CRE_SEQ}
  </update>  
  
  <update id="updateQuesLikeUpd" parameterType="Hashmap">
	UPDATE QUES_BUB_BAS set
 		 LIKE_CNT		= IFNULL(LIKE_CNT,0) + 1 			
	WHERE MEMB_SC_CD 	= #{MEMB_SC_CD}
	AND   MEMB_DEP_CD 	= #{MEMB_DEP_CD}
	AND   CRE_SEQ 		= #{CRE_SEQ}
  </update>  
  
  <update id="updateSugLikeUpd" parameterType="Hashmap">
	UPDATE SUG_BUB_BAS set
 		 LIKE_CNT		= IFNULL(LIKE_CNT,0) + 1 			
	WHERE MEMB_SC_CD 	= #{MEMB_SC_CD}
	AND   MEMB_DEP_CD 	= #{MEMB_DEP_CD}
	AND   CRE_SEQ 		= #{CRE_SEQ}
  </update>  
  
  <update id="updateGallLikeUpd" parameterType="Hashmap">
	UPDATE GALL_BUB_BAS set
 		 LIKE_CNT		= IFNULL(LIKE_CNT,0) + 1 			
	WHERE MEMB_SC_CD 	= #{MEMB_SC_CD}
	AND   MEMB_DEP_CD 	= #{MEMB_DEP_CD}
	AND   CRE_SEQ 		= #{CRE_SEQ}
  </update>  
  
  <update id="updateMarkLikeUpd" parameterType="Hashmap">
	UPDATE MARK_BUB_BAS set
 		 LIKE_CNT		= IFNULL(LIKE_CNT,0) + 1 			
	WHERE MEMB_SC_CD 	= #{MEMB_SC_CD}
	AND   MEMB_DEP_CD 	= #{MEMB_DEP_CD}
	AND   CRE_SEQ 		= #{CRE_SEQ}
  </update>  
  
  <select id="selectCheckEmail" resultType="hashMap" parameterType="hashMap">
  <!-- 비밀번호 찾기 -->
    SELECT 	IF(MEMB_EM = #{MEMB_EM},'00','07') AS RSLT_CD 
    FROM 	MEMB_BAS
	WHERE 	MEMB_ID = #{MEMB_ID}
  </select>

  <select id="selectIdEmail" resultType="hashMap" parameterType="hashMap">
  <!-- 아이디 찾기 -->
    SELECT 	IF(COUNT(*) = 0,'07','00') AS RSLT_CD
            ,MEMB_ID
    FROM 	MEMB_BAS
	WHERE 	MEMB_EM = #{MEMB_EM}
  </select>
  
  <select id="selectCertInfo" resultType="hashMap" parameterType="hashMap">
  <!-- 이메일 인증코드 확인 -->
    SELECT 	IF(CHK_NUM = #{INPUT_CD},'00','07') AS RSLT_CD 
    FROM 	CERT_MEMB_HIST
	WHERE 	MEMB_ID = #{MEMB_ID}
	AND 	CERT_NUM = #{CERT_NUM}
  </select>
  
  <insert id="insertCertInfo" parameterType="hashmap">
  <!-- ChkAndCert(코드검증 및 인증완료) -->
	INSERT INTO CERT_MEMB_HIST(
		MEMB_ID
		,CRE_SEQ
		,CERT_DIV_CD
		,CERT_DATE
		,CERT_NUM
		,CHK_NUM
	) VALUES (
		#{MEMB_ID}
		,NEXTVAL(cert_cre_seq)
		,#{CERT_DIV_CD}
		,SYSDATE()
		,#{CERT_NUM}
		,#{CHK_NUM}
	)
  </insert>  
  
  <insert id="insertTokenInfo" parameterType="hashmap">
	INSERT INTO TOKEN_INFO(
		TOKEN_ID
		,MEMB_ID
		,START_DAT
		,END_DAT
	) VALUES (
		#{TOKEN_ID}
		,#{LOGIN_ID}
		,SYSDATE()
		,DATE_ADD(SYSDATE(),interval 30 day)
	)
  </insert> 
  
  <select id="tokenCheckId" resultType="hashMap" parameterType="hashMap">
    SELECT 	MEMB_ID,TOKEN_ID, '00' AS RSLT_CD 
    FROM 	TOKEN_INFO
	WHERE 	TOKEN_ID = #{TOKEN_ID}
	AND     SYSDATE() BETWEEN START_DAT AND END_DAT  
  </select>
  
  <update id="tokenIdExp" parameterType="hashMap">
    UPDATE TOKEN_INFO SET 
    END_DAT = SYSDATE() 
	WHERE 	TOKEN_ID = #{TOKEN_ID}  
  </update>
  
  
</mapper>
